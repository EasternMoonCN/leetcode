#include <string>
#include <iostream>
#include <vector>
using namespace std;

/**
一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：

"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。



当前位若不为 0，一定可以独立编码，所以 dp[i] = dp[i - 1]，
然后再去考虑能不能后两位联合编码，后两位联合编码要满足两个条件：
    1.前一位不为字符 '0';
    2.这两位构成的数小于等于 26 。
    如果这两个条件都满足，就在原来的基础加上联合编码的种类 dp[i] += dp[i - 2]，
还要考虑越界的问题，也就是 i = 1 时怎么办 ？很简单，就是在前面的基础上加一，这个一指的就是后两位联合编码。
*/

class Solution
{
public:
    int numDecodings(string s)
    {
        int n = s.size();
        // 0开头无效
        if (s[0] == '0')
        {
            return 0;
        }
        vector<int> dp(n);
        // 一个字符可编码一次
        dp[0] = 1;
        for (int i = 1; i < n; ++i)
        {
            // 当前字符使用一个字符情况
            if (s[i] != '0')
            {
                // 编码个数直接为上个字符编码次数
                dp[i] = dp[i - 1];
            }
            // 当前字符可使用连续两个字符编码
            if (s[i - 1] != '0' && (s[i - 1] - '0') * 10 + s[i] - '0' <= 26)
            {
                // 每越界，就是一个字符情况+两个字符的情况
                if (i > 1)
                {
                    dp[i] += dp[i - 2];
                }
                // 越界了，就是一个字符+1
                else
                {
                    dp[i] += 1;
                }
            }
        }
        return dp[n - 1];
    }
};

int main()
{
    cout << Solution().numDecodings("226") << endl;
}